name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v2
      
    - name: Build solution
      run: msbuild hookfxr.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=x64 /p:PlatformToolset=v143
      
    - name: Collect build artifacts
      run: |
        mkdir -p artifacts\${{ matrix.configuration }}
        copy x64\${{ matrix.configuration }}\hostfxr.dll artifacts\${{ matrix.configuration }}\
        copy x64\${{ matrix.configuration }}\hostfxr.pdb artifacts\${{ matrix.configuration }}\ 2>nul || echo "PDB not found"
        copy hookfxr\hookfxr.ini artifacts\${{ matrix.configuration }}\
        copy README.md artifacts\${{ matrix.configuration }}\
      shell: cmd
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hookfxr-${{ matrix.configuration }}-${{ github.sha }}
        path: artifacts/${{ matrix.configuration }}/
        
  create-release:
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from vcxproj
      id: extract_version
      run: |
        [xml]$vcxproj = Get-Content "hookfxr/hookfxr.vcxproj"
        $version = $vcxproj.Project.PropertyGroup | Where-Object { $_.Label -eq "Globals" } | Select-Object -ExpandProperty Version
        
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Extracted version: $version"
      shell: pwsh
      
    - name: Download Release artifacts
      uses: actions/download-artifact@v4
      with:
        name: hookfxr-Release-${{ github.sha }}
        path: release-artifacts
        
    - name: Download Debug artifacts
      uses: actions/download-artifact@v4
      with:
        name: hookfxr-Debug-${{ github.sha }}
        path: debug-artifacts
        
    - name: Create release packages
      run: |
        # Create Release package
        7z a -tzip hookfxr-Release.zip .\release-artifacts\*
        
        # Create Debug package
        7z a -tzip hookfxr-Debug.zip .\debug-artifacts\*
        
        # Create combined package with both configurations
        mkdir combined
        mkdir combined\Release
        mkdir combined\Debug
        xcopy /E /I release-artifacts combined\Release
        xcopy /E /I debug-artifacts combined\Debug
        7z a -tzip hookfxr-All.zip .\combined\*
      shell: cmd
      
    - name: Check if release exists
      id: check_release
      run: |
        $version = "${{ steps.extract_version.outputs.VERSION }}"
        $tag = "v$version"
        
        # Check if tag already exists using git
        git fetch --tags
        $tagExists = git tag -l $tag
        
        if ($tagExists) {
          echo "Release $tag already exists, skipping release creation"
          echo "EXISTS=true" >> $env:GITHUB_OUTPUT
        } else {
          echo "Release $tag does not exist, will create it"
          echo "EXISTS=false" >> $env:GITHUB_OUTPUT
        }
        
        echo "TAG=$tag" >> $env:GITHUB_OUTPUT
        echo "Release tag: $tag"
      shell: pwsh
      
    - name: Create Release
      if: steps.check_release.outputs.EXISTS != 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.check_release.outputs.TAG }}
        name: hookfxr v${{ steps.extract_version.outputs.VERSION }}
        body: |
          ### Changes
          - Built from commit: ${{ github.sha }}
          
          ### Downloads
          - **hookfxr-Release.zip**: Production-ready build
          - **hookfxr-Debug.zip**: Debug build with symbols
          - **hookfxr-All.zip**: Contains both Release and Debug builds
          
          ### Installation
          1. Extract the archive to your .NET application directory
          2. Configure `hookfxr.ini` with your target assembly
          3. Run your application normally
          
          ### Requirements
          - Windows x64
          - .NET Core global framework-dependent deployment
          - Custom libnethost (included)
        draft: true
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        files: |
          hookfxr-Release.zip
          hookfxr-Debug.zip
          hookfxr-All.zip
        fail_on_unmatched_files: true
        generate_release_notes: false